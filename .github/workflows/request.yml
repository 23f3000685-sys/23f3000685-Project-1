name: TDS Project 1

on:
  workflow_dispatch:
    inputs:
      payload:
        description: "Raw JSON request (copy-paste)"
        required: true
  push:
    paths:
      - "requests/*.json"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse input JSON
        id: parse
        run: |
          echo "${{ github.event.inputs.payload }}" > request.json
          cat request.json | jq . > formatted.json
          cat formatted.json
          EMAIL=$(jq -r .email formatted.json)
          SECRET=$(jq -r .secret formatted.json)
          BRIEF=$(jq -r .brief formatted.json)
          TASK=$(jq -r .task formatted.json)
          ROUND=$(jq -r .round formatted.json)
          NONCE=$(jq -r .nonce formatted.json)
          EVAL_URL=$(jq -r .evaluation_url formatted.json)
          echo "email=$EMAIL" >> $GITHUB_OUTPUT
          echo "secret=$SECRET" >> $GITHUB_OUTPUT
          echo "brief=$BRIEF" >> $GITHUB_OUTPUT
          echo "task=$TASK" >> $GITHUB_OUTPUT
          echo "round=$ROUND" >> $GITHUB_OUTPUT
          echo "nonce=$NONCE" >> $GITHUB_OUTPUT
          echo "evaluation_url=$EVAL_URL" >> $GITHUB_OUTPUT

      - name: Validate secret
        run: |
          if [ "${{ steps.parse.outputs.secret }}" != "${{ secrets.FORM_SECRET }}" ]; then
            echo "‚ùå Invalid secret"
            exit 1
          fi

      - name: Create minimal app repo
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          REPO_NAME="${{ steps.parse.outputs.task }}-${{ steps.parse.outputs.round }}-$(date +%s)"
          gh repo create $REPO_NAME --public --confirm
          mkdir $REPO_NAME
          cd $REPO_NAME
          echo "<h1>${{ steps.parse.outputs.brief }}</h1>" > index.html
          echo "MIT License" > LICENSE
          cat <<EOF > README.md
          # $REPO_NAME

          ## Summary
          This app implements the following task:
          > ${{ steps.parse.outputs.brief }}

          ## Setup
          Hosted automatically via GitHub Pages.

          ## License
          MIT
          EOF

          git init
          git add .
          git commit -m "Initial commit"
          git branch -M main
          git remote add origin https://github.com/${{ github.repository_owner }}/$REPO_NAME.git
          git push -u origin main

          gh api -X POST repos/${{ github.repository_owner }}/$REPO_NAME/pages -f source='{"branch":"main"}'

          echo "repo_url=https://github.com/${{ github.repository_owner }}/$REPO_NAME" >> $GITHUB_OUTPUT
          echo "pages_url=https://${{ github.repository_owner }}.github.io/$REPO_NAME/" >> $GITHUB_OUTPUT
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Notify evaluator
        run: |
          jq -n \
            --arg email "${{ steps.parse.outputs.email }}" \
            --arg task "${{ steps.parse.outputs.task }}" \
            --arg round "${{ steps.parse.outputs.round }}" \
            --arg nonce "${{ steps.parse.outputs.nonce }}" \
            --arg repo_url "${{ steps.create.outputs.repo_url }}" \
            --arg commit_sha "${{ steps.create.outputs.commit_sha }}" \
            --arg pages_url "${{ steps.create.outputs.pages_url }}" \
            '{
              email: $email,
              task: $task,
              round: ($round|tonumber),
              nonce: $nonce,
              repo_url: $repo_url,
              commit_sha: $commit_sha,
              pages_url: $pages_url
            }' > body.json

          curl -s -X POST \
            -H "Content-Type: application/json" \
            -d @body.json \
            "${{ steps.parse.outputs.evaluation_url }}"
